<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:System.Windows.Controls">

    <Controls:ThicknessLeftConverter x:Key="ThicknessLeftConverter" />

    <Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding (VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, FallbackValue=True}" Value="True">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
        <Style.Resources>
            <ResourceDictionary />
        </Style.Resources>

        <Setter Property="RemarksTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Margin="3,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding}" Value="">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplateEdit">
            <Setter.Value>
                <DataTemplate>
                    <Controls:EditTextBox
                        Padding="1"
                        BorderThickness="0"
                        Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <!--  Windows Classic Theme colours  -->
        <Setter Property="BorderBrushSelected" Value="{x:Null}" />
        <Setter Property="BackgroundSelected" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="ForegroundSelected" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        <Setter Property="BorderBrushInactive" Value="{x:Null}" />
        <Setter Property="BackgroundInactive" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="ForegroundInactive" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="{Binding (VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, FallbackValue=Standard}" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False" />
        <Setter Property="Panel.Background" Value="#00FFFFFF" />
        <!-- Avoid ancestor bindings for alignment to remove warnings; use defaults instead -->
        <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Padding" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0" />
        <!--  Clear the default focus rectangle which would span the entire item in full width and with all visible children  -->
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />

        <!--  Pass on the MultiSelectTreeView' HoverHighlighting value to each item because we couldn't access it otherwise in the triggers  -->
        <!-- Replace ancestor bindings with defaults to avoid warnings -->
        <Setter Property="HoverHighlighting" Value="False" />
        <Setter Property="ItemIndent" Value="13" />
        <Setter Property="IsKeyboardMode" Value="False" />

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <!--  Set the second column width to * to have the items border expand to the right edge  -->
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!--  region Expander button  -->
                            <ToggleButton
                                Name="Expander"
                                ClickMode="Press"
                                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeViewItem}}, Path=IsExpanded, FallbackValue=False}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Style.Resources>
                                            <ResourceDictionary />
                                        </Style.Resources>
                                        <Setter Property="UIElement.Focusable" Value="False" />
                                        <Setter Property="FrameworkElement.Width" Value="12" />
                                        <Setter Property="FrameworkElement.Height" Value="16" />
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <!--  Default expander 'plus' graphic  -->
                                                    <Border
                                                        Width="12"
                                                        Height="16"
                                                        Padding="1,2,0,0"
                                                        Background="#00FFFFFF">
                                                        <Border
                                                            Width="9"
                                                            Height="9"
                                                            Background="White"
                                                            BorderBrush="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                                            BorderThickness="1"
                                                            SnapsToDevicePixels="True">
                                                            <Path
                                                                Name="ExpandPath"
                                                                Margin="1,1,1,1"
                                                                Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z"
                                                                Fill="#FF000000" />
                                                        </Border>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <!--  Replace with 'minus' graphic the node is expanded  -->
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Path.Data">
                                                                <Setter.Value>
                                                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <!--  endregion Expander button  -->

                            <!--  region Element grid  -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                <Grid Name="ElementGrid">
                                    <Border
                                        Margin="0,0,0,-1"
                                        Padding="{TemplateBinding Control.Padding}"
                                        VerticalAlignment="Center"
                                        Background="{TemplateBinding Panel.Background}"
                                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                                        SnapsToDevicePixels="True">
                                        <ContentPresenter
                                            Name="PART_Header"
                                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                            Content="{TemplateBinding HeaderedContentControl.Header}"
                                            ContentSource="Header"
                                            ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                            ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                            FocusManager.IsFocusScope="True"
                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                    </Border>
                                    <!--  Focus rectangle inside the item  -->
                                    <Rectangle
                                        Name="FocusRectangle"
                                        Margin="1,1,1,0"
                                        IsHitTestVisible="False"
                                        SnapsToDevicePixels="True"
                                        Stroke="Black"
                                        StrokeDashArray="0.5 1.5"
                                        StrokeThickness="1"
                                        Visibility="Hidden" />
                                </Grid>

                                <ContentPresenter
                                    Content="{TemplateBinding Remarks}"
                                    ContentTemplate="{TemplateBinding RemarksTemplate}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </StackPanel>
                            <!--  endregion Element grid  -->
                        </Grid>
                        <Grid Name="ItemsHostGrid" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemIndent, Converter={StaticResource ThicknessLeftConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Path
                                Name="RulerPath"
                                Margin="0,0,1,0"
                                Data="M0,0 L0,1"
                                SnapsToDevicePixels="True"
                                Stretch="Uniform"
                                Stroke="#60000000"
                                StrokeDashArray="0.5 2.5" />

                            <ItemsPresenter Name="ItemsHost" Grid.Column="1" />
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>

                        <!--  Set the visibility of the item  -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="FrameworkElement.Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Set the foreground, border and background when the item is selected  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsSelected" Value="True">
                            <Setter Property="Control.Background" Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Border.BorderBrush" Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundSelected, RelativeSource={RelativeSource Self}}" />
                        </Trigger>

                        <!--  Show the focus rectangle when the item is focused  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Controls:MultiSelectTreeViewItem.IsKeyboardMode" Value="True" />
                                <Condition Property="Controls:MultiSelectTreeViewItem.IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FocusRectangle" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <!--  Make all selected items grey when the tree view is not focused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=IsFocused, FallbackValue=False}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Control.Background" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource Self}}" />
                        </MultiDataTrigger>

                        <!--  Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused)  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush" Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Control.Background" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource Self}}" />
                        </MultiDataTrigger>

                        <!--  Collapse the child items host if the node is not expanded  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHostGrid" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Hide the expander button if there are no child nodes  -->
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                        </Trigger>

                        <!--  Use grey text colour when the item is not enabled  -->
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>

                        <!--  Hide vertical rulers if disabled  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:MultiSelectTreeView}}, Path=VerticalRulers, FallbackValue=False}" Value="False">
                            <Setter TargetName="RulerPath" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  Use a different template and colours in edit mode  -->
                        <Trigger Property="Controls:MultiSelectTreeViewItem.IsEditing" Value="True">
                            <Setter Property="HeaderTemplate" Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Control.Background" Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Border.BorderBrush" Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="FocusRectangle" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
